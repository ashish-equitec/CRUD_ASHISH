@model PagedList.IPagedList<WebApplicationCrud.Models.Employee>
@using PagedList.Mvc;


<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
      integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<div class="container mt-5">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <button class="btn btn-outline-success" onclick="location.href='@Url.Action("AddEmployee", "Employee")'">Create New</button>
            </div>
        </div>
        <div class="col-md-6 text-right">
            <div class="form-group">
                <div class="input-group">
                    <input type="text" class="form-control" id="search" placeholder="Enter employee name">
                    <div class="input-group-append">
                        <button class="btn btn-info" onclick="searchEmployees()">Search</button>
                    </div>
                    <div class="input-group-append ml-2">
                        @Html.ActionLink("Export to Excel", "ExportToExcel", null, new { @class = "btn btn-outline-info" })
                    </div>
                    <div class="input-group-append ml-2">
                        @Html.DropDownList("pageSize", ViewBag.PageSizeList as SelectList, new { @onchange = "changePageSize(this.value)" })

                    </div>
                </div>
            </div>
        </div>

    </div>

    <div id="employeeDetailsContainer">
        <table class="table">
            <thead>
                <tr>
                    <th> @Html.ActionLink("NAME", "GetAllEmployeeDetails", new { sortOrder = ViewBag.NameSortParam })</th>
                    <th> @Html.ActionLink("DOB", "GetAllEmployeeDetails", new { sortOrder = ViewBag.DOBSortParam })</th>
                    <th>@Html.ActionLink("LOCATION", "GetAllEmployeeDetails", new { sortOrder = ViewBag.LocationSortParam })</th>
                    <th> @Html.ActionLink("DESIGNATION", "GetAllEmployeeDetails", new { sortOrder = ViewBag.DesignationSortParam }) </th>
                    <th> @Html.ActionLink("EMAIL_ADDRESS", "GetAllEmployeeDetails", new { sortOrder = ViewBag.EmailSortParam }) </th>
                    <th class="table-heading edit-column text-primary"> ACTION </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td> @Html.DisplayFor(modelItem => item.Name)</td>
                        <td> @Html.DisplayFor(modelItem => item.DOB) </td>
                        <td>@Html.DisplayFor(modelItem => item.Location) </td>
                        <td> @Html.DisplayFor(modelItem => item.Designation)</td>
                        <td>@Html.DisplayFor(modelItem => item.Email_Address)</td>
                        <td class="action-column">
                            <button class="btn btn-warning" onclick="location.href='@Url.Action("EditEmployeeDetails", "Employee", new { id = item.Id })'">Edit</button>
                            <button class="btn btn-danger" onclick="deleteEmployee(@item.Id)">Delete</button>
                            <button class="btn btn-info" onclick="location.href='@Url.Action("EmployeeDetails", "Employee", new { id = item.Id })'">Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <div class="container">
        <div class="row">
            <div class="col-md-6 text-left">
                <p> <button class="btn btn-success" onclick="printTable()">PRINT</button></p>
            </div>
            <div class="col-md-6 text-right">
                @Html.ActionLink("View Deleted Records", "SoftDeletedEmployee", null, new { @class = "btn btn-primary", @id = "rightButton" })
            </div>
        </div>
    </div>
</div>
<hr />
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    @if (Model.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("GetAllEmployeeDetails", new { page = Model.PageNumber - 1, sortOrder = ViewBag.SortOrder, pageSize = ViewBag.PageSize })" aria-label="Previous">
                                <span aria-hidden="true">Prev</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">Prev</span>
                        </li>
                    }

                    @for (int i = 1; i <= Model.PageCount; i++)
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("GetAllEmployeeDetails", new { page = i, sortOrder = ViewBag.SortOrder, pageSize = ViewBag.PageSize })">@i</a>
                        </li>
                    }

                    @if (Model.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("GetAllEmployeeDetails", new { page = Model.PageNumber + 1, sortOrder = ViewBag.SortOrder, pageSize = ViewBag.PageSize })" aria-label="Next">
                                <span aria-hidden="true">Next</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">Next</span>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
    <div class="col-md-12 text-center">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    </div>
</div>

<script>

    function changePageSize(value) {
        window.location.href = '@Url.Action("GetAllEmployeeDetails")?page=1&sortOrder=' + '@ViewBag.SortOrder' + '&pageSize=' + value;
    }
    function deleteEmployee(employeeId) {
        if (confirm('Are you sure you want to delete this employee?')) {
            window.location.href = '@Url.Action("DeleteEmployee", "Employee")?id=' + employeeId;
        }
    }

    function searchEmployees() {
        var searchTerm = document.getElementById('search').value.trim().toLowerCase();
        var rows = document.querySelectorAll('table tr');

        rows.forEach(function (row) {
            var cells = row.querySelectorAll('td');
            var matchFound = false;

            cells.forEach(function (cell) {
                var cellContent = cell.textContent.trim().toLowerCase();

                if (cellContent.includes(searchTerm)) {
                    matchFound = true;
                }
            });

            if (matchFound) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }
    function displayRecordCount() {
        var searchTerm = document.getElementById('search').value.trim().toLowerCase();
        var rows = document.querySelectorAll('table tbody tr');
        var matchingRows = 0;

        rows.forEach(function (row) {
            var cells = row.querySelectorAll('td');
            var matchFound = false;

            cells.forEach(function (cell) {
                var cellContent = cell.textContent.trim().toLowerCase();

                if (cellContent.includes(searchTerm)) {
                    matchFound = true;
                }
            });

            if (matchFound) {
                matchingRows++;
            }
        });

        alert('Number of matching records: ' + matchingRows);
    }

    function printTable() {
        var printWindow = window.open('', '_blank');
        var tableContent = document.getElementById('employeeDetailsContainer').outerHTML;

        var hideColumns = ['action-column', 'edit-column'];

        var style = '<style>';
        hideColumns.forEach(function (column) {
            style += '.' + column + ' { display: none; } ';
        });
        style += '</style>';

        printWindow.document.write('<html><head><title>Employee Details</title>' + style + '</head><body>');
        printWindow.document.write('<h2>Employee Details</h2>');
        printWindow.document.write(tableContent);
        printWindow.document.write('</body></html>');
        printWindow.document.close();
        printWindow.print();
    }
</script>
